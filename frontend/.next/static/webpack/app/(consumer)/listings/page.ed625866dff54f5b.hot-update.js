"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(consumer)/listings/page",{

/***/ "(app-pages-browser)/./src/components/KakaoMap.tsx":
/*!*************************************!*\
  !*** ./src/components/KakaoMap.tsx ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ KakaoMap)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n/**\n * 카카오맵 컴포넌트\n * \n * @example\n * ```tsx\n * <KakaoMap\n *   center={{ lat: 37.5665, lng: 126.9780 }}\n *   level={3}\n *   markers={[\n *     { id: \"1\", position: { lat: 37.5665, lng: 126.9780 }, title: \"서울시청\" }\n *   ]}\n *   onMarkerClick={(id) => console.log(\"Clicked:\", id)}\n * />\n * ```\n */ function KakaoMap(param) {\n    let { center: initialCenter = {\n        lat: 37.5665,\n        lng: 126.9780\n    }, level: initialLevel = 3, width = \"100%\", height = \"500px\", markers = [], onMarkerClick, onBoundsChanged, useClusterer = false } = param;\n    _s();\n    const mapContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const clustererRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isMapLoaded, setIsMapLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const onBoundsChangedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(onBoundsChanged);\n    // onBoundsChanged가 변경되면 ref 업데이트\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"KakaoMap.useEffect\": ()=>{\n            onBoundsChangedRef.current = onBoundsChanged;\n        }\n    }[\"KakaoMap.useEffect\"], [\n        onBoundsChanged\n    ]);\n    // 카카오맵 SDK 로드 및 지도 초기화 (최초 1회만)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"KakaoMap.useEffect\": ()=>{\n            if (!mapContainerRef.current) {\n                console.log(\"KakaoMap: mapContainerRef is not ready\");\n                return;\n            }\n            // 이미 지도가 생성되었으면 재생성하지 않음\n            if (mapRef.current) {\n                console.log(\"KakaoMap: Map already exists, skipping initialization\");\n                return;\n            }\n            const initMap = {\n                \"KakaoMap.useEffect.initMap\": ()=>{\n                    var _window_kakao;\n                    console.log(\"KakaoMap: Initializing map...\");\n                    console.log(\"KakaoMap: window.kakao exists?\", !!window.kakao);\n                    console.log(\"KakaoMap: window.kakao.maps exists?\", !!((_window_kakao = window.kakao) === null || _window_kakao === void 0 ? void 0 : _window_kakao.maps));\n                    console.log(\"KakaoMap: Script src should be loaded\");\n                    // SDK 로딩 대기\n                    if (!window.kakao || !window.kakao.maps) {\n                        console.error(\"❌ Kakao Maps SDK가 아직 로드되지 않았습니다. 재시도 중...\");\n                        setTimeout({\n                            \"KakaoMap.useEffect.initMap\": ()=>{\n                                if (!window.kakao || !window.kakao.maps) {\n                                    console.error(\"❌ Kakao Maps SDK 로드 실패. .env.local 파일을 확인하세요.\");\n                                    console.log(\"환경변수 확인:\", \"0ac2a982e676a58f9a4245749206f78b\");\n                                    return;\n                                }\n                                initMap(); // 재시도\n                            }\n                        }[\"KakaoMap.useEffect.initMap\"], 1000);\n                        return;\n                    }\n                    console.log(\"✅ Kakao Maps SDK loaded successfully\");\n                    window.kakao.maps.load({\n                        \"KakaoMap.useEffect.initMap\": ()=>{\n                            console.log(\"KakaoMap: kakao.maps.load() callback called\");\n                            const container = mapContainerRef.current;\n                            if (!container) {\n                                console.error(\"Container element lost\");\n                                return;\n                            }\n                            const options = {\n                                center: new window.kakao.maps.LatLng(initialCenter.lat, initialCenter.lng),\n                                level: initialLevel\n                            };\n                            console.log(\"KakaoMap: Creating map with options:\", options);\n                            const map = new window.kakao.maps.Map(container, options);\n                            mapRef.current = map;\n                            console.log(\"✅ Map created successfully\");\n                            // 클러스터러 초기화\n                            if (useClusterer && window.kakao.maps.MarkerClusterer) {\n                                clustererRef.current = new window.kakao.maps.MarkerClusterer({\n                                    map: map,\n                                    averageCenter: true,\n                                    minLevel: 5,\n                                    minClusterSize: 2\n                                });\n                            }\n                            // 지도 영역 변경 이벤트 (idle 이벤트 사용 - 지도 이동이 완료된 후에만 호출)\n                            if (onBoundsChangedRef.current) {\n                                window.kakao.maps.event.addListener(map, \"idle\", {\n                                    \"KakaoMap.useEffect.initMap\": ()=>{\n                                        const bounds = map.getBounds();\n                                        const sw = bounds.getSouthWest();\n                                        const ne = bounds.getNorthEast();\n                                        if (onBoundsChangedRef.current) {\n                                            onBoundsChangedRef.current({\n                                                sw: {\n                                                    lat: sw.getLat(),\n                                                    lng: sw.getLng()\n                                                },\n                                                ne: {\n                                                    lat: ne.getLat(),\n                                                    lng: ne.getLng()\n                                                }\n                                            });\n                                        }\n                                    }\n                                }[\"KakaoMap.useEffect.initMap\"]);\n                            }\n                            setIsMapLoaded(true);\n                        }\n                    }[\"KakaoMap.useEffect.initMap\"]);\n                }\n            }[\"KakaoMap.useEffect.initMap\"];\n            // SDK가 이미 로드되었는지 확인\n            if (window.kakao && window.kakao.maps) {\n                if (window.kakao.maps.load) {\n                    initMap();\n                } else {\n                    // 이미 로드된 경우\n                    setIsMapLoaded(true);\n                }\n            } else {\n                // SDK 로드 대기\n                const checkKakao = setInterval({\n                    \"KakaoMap.useEffect.checkKakao\": ()=>{\n                        if (window.kakao && window.kakao.maps) {\n                            clearInterval(checkKakao);\n                            initMap();\n                        }\n                    }\n                }[\"KakaoMap.useEffect.checkKakao\"], 100);\n                return ({\n                    \"KakaoMap.useEffect\": ()=>clearInterval(checkKakao)\n                })[\"KakaoMap.useEffect\"];\n            }\n        }\n    }[\"KakaoMap.useEffect\"], []); // 빈 배열: 최초 마운트 시에만 실행\n    // 마커 업데이트\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"KakaoMap.useEffect\": ()=>{\n            if (!isMapLoaded || !mapRef.current || !window.kakao) return;\n            // 기존 마커 제거\n            const hadMarkers = markersRef.current.length > 0;\n            markersRef.current.forEach({\n                \"KakaoMap.useEffect\": (marker)=>marker.setMap(null)\n            }[\"KakaoMap.useEffect\"]);\n            markersRef.current = [];\n            // 클러스터러 초기화\n            if (clustererRef.current) {\n                clustererRef.current.clear();\n            }\n            // 새 마커 생성\n            const newMarkers = markers.map({\n                \"KakaoMap.useEffect.newMarkers\": (markerData)=>{\n                    const markerPosition = new window.kakao.maps.LatLng(markerData.position.lat, markerData.position.lng);\n                    // 커스텀 마커 이미지 (선택사항)\n                    const marker = new window.kakao.maps.Marker({\n                        position: markerPosition,\n                        title: markerData.title\n                    });\n                    // 마커 클릭 이벤트\n                    window.kakao.maps.event.addListener(marker, \"click\", {\n                        \"KakaoMap.useEffect.newMarkers\": ()=>{\n                            if (onMarkerClick) {\n                                onMarkerClick(markerData.id);\n                            } else if (markerData.onClick) {\n                                markerData.onClick(markerData.id);\n                            }\n                        }\n                    }[\"KakaoMap.useEffect.newMarkers\"]);\n                    // 인포윈도우 (가격 표시)\n                    if (markerData.price) {\n                        const infowindow = new window.kakao.maps.InfoWindow({\n                            content: '<div style=\"padding:5px;font-size:12px;font-weight:bold;\">'.concat(markerData.price, \"</div>\"),\n                            removable: false\n                        });\n                        // 마커 hover 시 인포윈도우 표시\n                        window.kakao.maps.event.addListener(marker, \"mouseover\", {\n                            \"KakaoMap.useEffect.newMarkers\": ()=>{\n                                infowindow.open(mapRef.current, marker);\n                            }\n                        }[\"KakaoMap.useEffect.newMarkers\"]);\n                        window.kakao.maps.event.addListener(marker, \"mouseout\", {\n                            \"KakaoMap.useEffect.newMarkers\": ()=>{\n                                infowindow.close();\n                            }\n                        }[\"KakaoMap.useEffect.newMarkers\"]);\n                    }\n                    return marker;\n                }\n            }[\"KakaoMap.useEffect.newMarkers\"]);\n            // 클러스터러 사용 시\n            if (clustererRef.current && newMarkers.length > 0) {\n                clustererRef.current.addMarkers(newMarkers);\n            } else {\n                // 일반 마커 표시\n                newMarkers.forEach({\n                    \"KakaoMap.useEffect\": (marker)=>marker.setMap(mapRef.current)\n                }[\"KakaoMap.useEffect\"]);\n            }\n            markersRef.current = newMarkers;\n            // 마커가 있을 경우 지도 범위 조정 (최초 로드 시에만)\n            if (newMarkers.length > 0 && !hadMarkers) {\n                console.log(\"KakaoMap: Auto-fitting bounds (first time only)\");\n                const bounds = new window.kakao.maps.LatLngBounds();\n                newMarkers.forEach({\n                    \"KakaoMap.useEffect\": (marker)=>{\n                        bounds.extend(marker.getPosition());\n                    }\n                }[\"KakaoMap.useEffect\"]);\n                mapRef.current.setBounds(bounds);\n            }\n        }\n    }[\"KakaoMap.useEffect\"], [\n        isMapLoaded,\n        markers,\n        onMarkerClick\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mapContainerRef,\n        style: {\n            width,\n            height,\n            borderRadius: \"8px\",\n            overflow: \"hidden\"\n        }\n    }, void 0, false, {\n        fileName: \"G:\\\\proptecher\\\\proptecher\\\\frontend\\\\src\\\\components\\\\KakaoMap.tsx\",\n        lineNumber: 260,\n        columnNumber: 5\n    }, this);\n}\n_s(KakaoMap, \"LpostiZpB8DAhwaniDF6v8n/+K8=\");\n_c = KakaoMap;\nvar _c;\n$RefreshReg$(_c, \"KakaoMap\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/KakaoMap.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/data/listings.ts":
/*!**********************************!*\
  !*** ./src/lib/data/listings.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getListingDetailVM: () => (/* binding */ getListingDetailVM),\n/* harmony export */   getListings: () => (/* binding */ getListings),\n/* harmony export */   toVM: () => (/* binding */ toVM)\n/* harmony export */ });\n// src/lib/data/listings.ts\n// ========== 1) 백엔드 원본 타입(+ 가격 필드 추가) ==========\n// ========== 3) 어댑터 & 유틸: ApiListing → ListingDetailVM ==========\nconst toCurrencyShort = (n)=>{\n    if (n <= 0) return \"0원\";\n    if (n >= 10000) return \"\".concat(Math.round(n / 10000), \"만원\");\n    return \"\".concat(n.toLocaleString(), \"원\");\n};\nconst mToText = (m)=>m == null ? null : \"\".concat(m, \"m\");\nconst formatDateDot = (iso)=>{\n    if (!iso) return null;\n    if (iso === \"즉시\") return null;\n    const m = iso.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n    if (!m) return iso;\n    return \"\".concat(m[1], \".\").concat(m[2], \".\").concat(m[3]);\n};\nconst formatMoveIn = (raw)=>{\n    if (!raw) return \"-\";\n    if (raw === \"즉시\") return \"바로 입주 가능\";\n    const d = formatDateDot(raw);\n    return d !== null && d !== void 0 ? d : raw;\n};\nconst toAreaText = (sqm)=>{\n    if (sqm == null || !Number.isFinite(sqm)) return \"-\";\n    return \"\".concat(sqm % 1 === 0 ? sqm.toFixed(0) : sqm.toFixed(2), \"㎡\");\n};\nconst formatPrice = (won)=>{\n    if (!Number.isFinite(won) || won <= 0) return \"-\";\n    if (won < 100000000) return (won / 10000).toLocaleString();\n    const man = Math.floor(won / 10000);\n    const eok = Math.floor(man / 10000);\n    const rest = man % 10000;\n    return rest > 0 ? \"\".concat(eok, \"억 \").concat(rest.toLocaleString()) : \"\".concat(eok, \"억\");\n};\nfunction makePriceText(api) {\n    switch(api.listing_type){\n        case \"전세\":\n            return api.jeonse_price != null ? formatPrice(api.jeonse_price) : \"-\";\n        case \"월세\":\n            if (api.monthly_deposit == null || api.monthly_rent == null) return \"-\";\n            return \"\".concat(formatPrice(api.monthly_deposit), \"/\").concat(formatPrice(api.monthly_rent));\n        case \"매매\":\n            return api.sale_price != null ? formatPrice(api.sale_price) : \"-\";\n    }\n    return \"-\";\n}\nconst formatFloorText = (raw)=>{\n    const s = (raw || \"\").trim();\n    if (!s) return s;\n    if (s.includes(\"층\") || s.includes(\"지하\") || s.includes(\"반지하\") || s.includes(\"옥탑\")) return s;\n    const mm = s.match(/^(\\d+)\\s*\\/\\s*(\\d+)$/);\n    if (mm) {\n        const cur = Number(mm[1]);\n        const tot = Number(mm[2]);\n        if (!Number.isNaN(cur) && !Number.isNaN(tot)) return \"\".concat(cur, \"층/\").concat(tot, \"층\");\n    }\n    const m1 = s.match(/^(\\d+)$/);\n    if (m1) return \"\".concat(m1[1], \"층\");\n    return s;\n};\nconst formatBuiltYearText = (y)=>{\n    if (Number.isFinite(y) && y > 0) return \"\".concat(y, \"년\");\n    return \"\".concat(y);\n};\nfunction toVM(api) {\n    // API 응답의 DecimalField는 문자열로 올 수 있으므로 숫자로 변환\n    const exclusiveAreaSqm = api.exclusive_area_sqm != null ? typeof api.exclusive_area_sqm === 'string' ? parseFloat(api.exclusive_area_sqm) : api.exclusive_area_sqm : 0;\n    const exclusiveAreaPyeong = api.exclusive_area_pyeong != null ? typeof api.exclusive_area_pyeong === 'string' ? parseFloat(api.exclusive_area_pyeong) : api.exclusive_area_pyeong : 0;\n    const supplyAreaSqm = api.supply_area_sqm != null ? typeof api.supply_area_sqm === 'string' ? parseFloat(api.supply_area_sqm) : api.supply_area_sqm : null;\n    const exclusiveAreaText = exclusiveAreaSqm > 0 && exclusiveAreaPyeong > 0 ? \"\".concat(exclusiveAreaSqm.toFixed(2), \"㎡ (\").concat(exclusiveAreaPyeong.toFixed(2), \"평)\") : \"-\";\n    const supplyAreaText = toAreaText(supplyAreaSqm);\n    var _api_rooms, _api_bathrooms, _api_rooms1, _api_bathrooms1, _api_built_year, _api_built_year1, _api_amenity_summary, _api_entrance_type, _api_building_use, _api_qa;\n    return {\n        heroImages: api.images && api.images.length > 0 ? api.images : [],\n        leaseType: api.listing_type,\n        priceText: makePriceText(api),\n        address: api.address,\n        adminFeeText: toCurrencyShort(api.maintenance_fee_monthly),\n        parking: api.parking_info || null,\n        orientation: api.orientation || null,\n        houseType: api.house_type,\n        specs: {\n            exclusiveAreaText,\n            supplyAreaText,\n            areaBothText: exclusiveAreaSqm > 0 ? \"\".concat(toAreaText(exclusiveAreaSqm), \" / \").concat(supplyAreaText) : supplyAreaText !== \"-\" ? supplyAreaText : \"-\",\n            rooms: (_api_rooms = api.rooms) !== null && _api_rooms !== void 0 ? _api_rooms : 0,\n            baths: (_api_bathrooms = api.bathrooms) !== null && _api_bathrooms !== void 0 ? _api_bathrooms : 0,\n            roomsBathsText: \"\".concat((_api_rooms1 = api.rooms) !== null && _api_rooms1 !== void 0 ? _api_rooms1 : 0, \"룸 \").concat((_api_bathrooms1 = api.bathrooms) !== null && _api_bathrooms1 !== void 0 ? _api_bathrooms1 : 0, \"욕실\"),\n            floor: formatFloorText(api.floor),\n            builtYear: (_api_built_year = api.built_year) !== null && _api_built_year !== void 0 ? _api_built_year : 0,\n            builtYearText: formatBuiltYearText((_api_built_year1 = api.built_year) !== null && _api_built_year1 !== void 0 ? _api_built_year1 : 0)\n        },\n        env: {\n            traffic: {\n                scores: {\n                    convenience: api.public_transport_score,\n                    diversity: api.line_variety_score\n                },\n                busStops: api.bus_stops.map((b)=>{\n                    var _b_bus_numbers;\n                    return {\n                        name: b.stop_name,\n                        distance: mToText(b.distance_m),\n                        lines: (_b_bus_numbers = b.bus_numbers) !== null && _b_bus_numbers !== void 0 ? _b_bus_numbers : []\n                    };\n                }),\n                subways: api.stations.map((s)=>{\n                    var _s_line_names;\n                    return {\n                        name: s.station_name,\n                        distance: mToText(s.distance_m),\n                        lines: (_s_line_names = s.line_names) !== null && _s_line_names !== void 0 ? _s_line_names : []\n                    };\n                })\n            },\n            amenity: {\n                summary: (_api_amenity_summary = api.amenity_summary) !== null && _api_amenity_summary !== void 0 ? _api_amenity_summary : \"수집된 편의시설 요약이 아직 없어요.\"\n            }\n        },\n        householdTotalText: api.household_total != null ? \"\".concat(api.household_total, \"세대\") : \"-\",\n        parkingTotalText: api.parking_total != null ? \"\".concat(api.parking_total, \"대\") : \"-\",\n        entranceType: (_api_entrance_type = api.entrance_type) !== null && _api_entrance_type !== void 0 ? _api_entrance_type : null,\n        moveInText: formatMoveIn(api.move_in_date),\n        buildingUseText: (_api_building_use = api.building_use) !== null && _api_building_use !== void 0 ? _api_building_use : null,\n        approvalDateText: formatDateDot(api.approval_date),\n        firstRegisteredText: formatDateDot(api.first_registered_at),\n        /** 단지/생활은 실제 데이터 대신 플레이스홀더 고정 */ apt: {\n            summary: \"내용이 아직 없어요.\"\n        },\n        life: {\n            summary: \"내용이 아직 없어요.\"\n        },\n        qa: (_api_qa = api.qa) !== null && _api_qa !== void 0 ? _api_qa : []\n    };\n}\n// ========== 5) 매물 목록 조회 API ==========\nasync function getListings(bounds) {\n    try {\n        const apiUrl = \"http://localhost:8000\" || 0;\n        const url = bounds ? \"\".concat(apiUrl, \"/api/listings/?bounds=\").concat(bounds) : \"\".concat(apiUrl, \"/api/listings/\");\n        const res = await fetch(url, {\n            cache: \"no-store\"\n        });\n        if (!res.ok) throw new Error(\"Failed to fetch listings: \".concat(res.status));\n        const json = await res.json();\n        return json.listings;\n    } catch (error) {\n        console.error('Failed to fetch listings from API:', error);\n        // 폴백: 빈 배열 반환\n        return [];\n    }\n}\n// ========== 6) 매물 상세 조회 API ==========\nasync function getListingDetailVM(id) {\n    try {\n        const apiUrl = \"http://localhost:8000\" || 0;\n        const res = await fetch(\"\".concat(apiUrl, \"/api/listings/\").concat(id, \"/\"), {\n            cache: \"no-store\"\n        });\n        if (!res.ok) throw new Error(\"bad status\");\n        const json = await res.json();\n        return toVM(json);\n    } catch (error) {\n        console.error('Failed to fetch listing detail from API:', error);\n        // 폴백(mock) — 개발 편의용\n        const mock = {\n            listing_type: \"전세\",\n            jeonse_price: 320000000,\n            address: \"서울특별시 강남구 테헤란로 123\",\n            maintenance_fee_monthly: 120000,\n            parking_info: \"주차 1대\",\n            exclusive_area_sqm: 84.97,\n            exclusive_area_pyeong: 25.72,\n            rooms: 3,\n            bathrooms: 2,\n            floor: \"12/25\",\n            built_year: 2008,\n            supply_area_sqm: 109.23,\n            orientation: \"남동\",\n            household_total: 512,\n            parking_total: 600,\n            entrance_type: \"계단식\",\n            move_in_date: \"즉시\",\n            building_use: \"공동주택(아파트)\",\n            approval_date: \"2008-09-15\",\n            first_registered_at: \"2025-10-03\",\n            contract_term_months: 24,\n            renewable: true,\n            public_transport_score: 8,\n            line_variety_score: 4,\n            bus_stops: [\n                {\n                    stop_name: \"선릉역.르네상스호텔\",\n                    distance_m: 180,\n                    bus_numbers: [\n                        \"146\",\n                        \"341\",\n                        \"360\",\n                        \"N13\",\n                        \"광역M711\"\n                    ]\n                },\n                {\n                    stop_name: \"○○사거리\",\n                    distance_m: null,\n                    bus_numbers: [\n                        \"3412\",\n                        \"강남08\"\n                    ]\n                }\n            ],\n            stations: [\n                {\n                    station_name: \"선릉역\",\n                    line_names: [\n                        \"2호선\",\n                        \"수인분당선\"\n                    ],\n                    distance_m: 420\n                },\n                {\n                    station_name: \"역삼역\",\n                    line_names: [\n                        \"2호선\"\n                    ],\n                    distance_m: null\n                }\n            ],\n            images: [\n                \"/images/house1.jpg\"\n            ],\n            //  apt_summary / life_summary 제거 (이제 미사용)\n            amenity_summary: \"도보 5분 내 편의점/카페/식당 밀집, 대형마트 차량 7분.\",\n            qa: []\n        };\n        return toVM(mock);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/data/listings.ts\n"));

/***/ })

});